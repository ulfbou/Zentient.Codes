name: CI-CD

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk-and-framework:
          - sdk: 8.x
            framework: net8.0
          - sdk: 9.x
            framework: net9.0

    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests
        run: dotnet test --no-build --configuration Release --logger trx --results-directory TestResults

      - name: Upload Test Results for ${{ matrix.sdk-and-framework.sdk }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.sdk-and-framework.sdk }}
          path: TestResults

      - name: Report Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Tests (${{ matrix.sdk-and-framework.sdk }})
          path: "TestResults/*.trx"
          reporter: dotnet-trx
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
  pack:
    name: Create Package
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        sdk-and-framework:
          - sdk: 8.x
            framework: net8.0
          - sdk: 9.x
            framework: net9.0
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Setup all .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies with ${{ matrix.sdk-and-framework.framework }}
        run: dotnet restore
      
      - name: Pack
        run: |
          PROJECTS=$(find . -name "*.csproj")
          for PROJECT_PATH in $PROJECTS; do
            dotnet pack "$PROJECT_PATH" --no-restore --configuration Release -o out /p:TargetFramework=${{ matrix.sdk-and-framework.framework }}
          done

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ matrix.sdk-and-framework.framework }}
          path: out/*.nupkg
  
  
  publish-staging:
    name: Publish to GitHub Packages (Staging)
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: out

      - name: Setup all .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Push to GitHub Packages
        run: dotnet nuget push "out/**/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
  
  
  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'release'
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: out

      - name: Setup all .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Push to NuGet
        run: dotnet nuget push "out/**/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
