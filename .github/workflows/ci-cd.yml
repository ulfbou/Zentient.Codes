name: CI-CD

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.sdk-and-framework.sdk }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk-and-framework:
          - sdk: 8.x
            framework: net8.0
          - sdk: 9.x
            framework: net9.0
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup all .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Show installed SDKs (debug)
        run: dotnet --info

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution (target framework)
        run: |
          dotnet build ./Zentient.Codes.sln --no-restore --configuration Release --framework ${{ matrix.sdk-and-framework.framework }}

      - name: Run Tests (target framework)
        run: |
          dotnet test ./Zentient.Codes.sln --no-build --configuration Release --framework ${{ matrix.sdk-and-framework.framework }} --logger trx --results-directory TestResults

      - name: Upload Test Results for ${{ matrix.sdk-and-framework.sdk }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.sdk-and-framework.sdk }}
          path: TestResults

      - name: Report Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Tests (${{ matrix.sdk-and-framework.sdk }})
          path: "TestResults/*.trx"
          reporter: dotnet-trx
          github-token: ${{ secrets.GITHUB_TOKEN }}

  pack:
    name: Create Package (${{ matrix.sdk-and-framework.framework }})
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      fail-fast: false
      matrix:
        sdk-and-framework:
          - sdk: 8.x
            framework: net8.0
          - sdk: 9.x
            framework: net9.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup all .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Show installed SDKs (debug)
        run: dotnet --info

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore (for pack)
        run: dotnet restore

      - name: Build and Pack (src only, skip tests)
        run: |
          mkdir -p out
          # only pack projects in ./src (skip tests and other non-packable projects)
          PROJECTS=$(find ./src -name "*.csproj")
          echo "Projects to consider for pack:"
          echo "$PROJECTS"

          for PROJECT_PATH in $PROJECTS; do
            # Skip test projects by convention
            if [[ "$PROJECT_PATH" == *".Tests."* ]] || [[ "$PROJECT_PATH" == *"/tests/"* ]] || [[ "$PROJECT_PATH" == *"/Test/"* ]]; then
              echo "Skipping test project: $PROJECT_PATH"
              continue
            fi

            # Optionally inspect IsPackable and skip if explicitly false
            IS_PACKABLE=$(dotnet msbuild "$PROJECT_PATH" -nologo -t:GetProperty -p:PropertyName=IsPackable 2>/dev/null | sed -n 's/.*IsPackable: //p' || true)
            if [[ -n "$IS_PACKABLE" && "$IS_PACKABLE" == "false" ]]; then
              echo "Project marked IsPackable=false, skipping: $PROJECT_PATH"
              continue
            fi

            echo "Building $PROJECT_PATH for ${{ matrix.sdk-and-framework.framework }}"
            dotnet build "$PROJECT_PATH" --no-restore --configuration Release --framework ${{ matrix.sdk-and-framework.framework }}

            echo "Packing $PROJECT_PATH for target ${{ matrix.sdk-and-framework.framework }}"
            # Use MSBuild property to specify the target framework to avoid short -f forwarding issues
            dotnet pack "$PROJECT_PATH" --no-restore --no-build --configuration Release -o out --property:TargetFramework=${{ matrix.sdk-and-framework.framework }}
          done

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ matrix.sdk-and-framework.framework }}
          path: out/*.nupkg

  publish-staging:
    name: Publish to GitHub Packages (Staging)
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: out

      - name: Setup all .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Push to GitHub Packages
        run: dotnet nuget push "out/**/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'release'
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          path: out

      - name: Setup all .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            9.x

      - name: Push to NuGet
        run: dotnet nuget push "out/**/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
